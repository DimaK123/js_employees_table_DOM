{"version":3,"sources":["scripts/main.js"],"names":["bodyOfTable","document","querySelector","headOfTable","headCells","children","body","offices","callNotification","title","type","text","notification","createElement","dataset","qa","classList","add","innerHTML","append","setTimeout","remove","forEach","element","sortStatus","addEventListener","tableRows","rows","index","event","target","cellIndex","headCell","directionOfSort","sort","a","b","first","second","innerText","localeCompare","convertToNumber","value","slice","replace","parentElement","insertAdjacentHTML","form","preventDefault","data","FormData","formValues","Object","fromEntries","entries","money","salary","newRow","name","position","office","age","toLocaleString","length","isNaN","cellInitialValue","row","currentCell","input","getElementsByClassName","min","max","focus","success","key"],"mappings":"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","file":"main.c545b9f5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst bodyOfTable = document.querySelector('tbody');\n\nconst headOfTable = document.querySelector('tHead > tr');\n\nconst headCells = headOfTable.children;\n\nconst body = document.body;\n\nconst offices = `\n  <option value=\"Tokyo\">Tokyo</option>\n\n  <option value=\"Singapore\">Singapore</option>\n\n  <option value=\"London\">London</option>\n\n  <option value=\"New York\">New York</option>\n\n  <option value=\"Edinburgh\">Edinburgh</option>\n\n  <option value=\"San Francisco\">San Francisco</option>\n`;\n\n[...headCells].forEach(element => (element.dataset.sortStatus = null));\n\nheadOfTable.addEventListener('click', () => {\n  const tableRows = [...bodyOfTable.rows];\n\n  const index = event.target.cellIndex;\n\n  const headCell = headCells[index];\n\n  const directionOfSort = headCell.dataset.sortStatus;\n\n  [...headCells].forEach(element => {\n    if (event.target !== element) {\n      element.dataset.sortStatus = null;\n    }\n  });\n\n  switch (index) {\n    case 0:\n    case 1:\n    case 2:\n\n      tableRows.sort((a, b) => {\n        const first = a.children[index];\n        const second = b.children[index];\n\n        if (directionOfSort === 'null' || directionOfSort === 'desc') {\n          headCell.dataset.sortStatus = 'asc';\n\n          return first.innerText.localeCompare(second.innerText);\n        } else {\n          headCell.dataset.sortStatus = 'desc';\n\n          return second.innerText.localeCompare(first.innerText);\n        }\n      });\n\n      break;\n\n    case 3:\n    case 4:\n      tableRows.sort((a, b) => {\n        let first = a.children[index].innerText;\n        let second = b.children[index].innerText;\n\n        if (index === 4) {\n          const convertToNumber = (value) => {\n            return value.slice(1).replace(/,/g, '');\n          };\n\n          first = convertToNumber(first);\n\n          second = convertToNumber(second);\n        }\n\n        if (directionOfSort === 'null' || directionOfSort === 'desc') {\n          headCell.dataset.sortStatus = 'asc';\n\n          return first - second;\n        } else {\n          headCell.dataset.sortStatus = 'desc';\n\n          return second - first;\n        }\n      });\n  }\n\n  bodyOfTable.append(...tableRows);\n});\n\nbodyOfTable.addEventListener('click', () => {\n  [...bodyOfTable.rows].forEach(element => element.classList.remove('active'));\n  event.target.parentElement.classList.add('active');\n});\n\nbody.insertAdjacentHTML('beforeend', `\n  <form\n    method=\"post\"\n    class=\"new-employee-form\"\n  >\n    <label>\n      Name:\n      <input\n        name=\"name\"\n        type=\"text\"\n        data-qa=\"name\"\n      >\n      </input>\n    </label>\n\n    <label>\n      Position:\n      <input\n        name=\"position\"\n        type=\"text\"\n        data-qa=\"position\"\n      >\n      </input>\n    </label>\n\n    <label>\n      Office:\n      <select\n        name=\"office\"\n        data-qa=\"office\"\n      >\n        ${offices}\n      </select>\n    </label>\n\n    <label>\n      Age:\n      <input\n        name=\"age\"\n        type=\"number\"\n        data-qa=\"age\"\n        min=\"18\"\n      >\n      </input>\n    </label>\n\n    <label>\n      Salary:\n      <input\n        name=\"salary\"\n        type=\"number\"\n        data-qa=\"salary\"\n      >\n      </input>\n    </label>\n\n    <button type=\"submit\">\n      Save to table\n    </button>\n  </form>\n`);\n\nfunction callNotification(title, type, text) {\n  const notification = document.createElement('div');\n\n  notification.dataset.qa = 'notification';\n\n  notification.classList.add('notification', type);\n\n  notification.innerHTML = `\n    <h2 class=\"title\">${title}</h2>\n    ${text}\n  `;\n\n  body.append(notification);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 3000);\n};\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', () => {\n  event.preventDefault();\n\n  const data = new FormData(form);\n\n  const formValues = Object.fromEntries(data.entries());\n\n  const money = +(formValues.salary);\n\n  const newRow = `\n    <tr>\n      <td>\n        ${formValues.name}\n      </td>\n\n      <td>\n        ${formValues.position}\n      </td>\n\n      <td>\n        ${formValues.office}\n      </td>\n\n      <td>\n        ${formValues.age}\n      </td>\n\n      <td>\n        $${money.toLocaleString('en-US')}\n      </td>\n    </tr>\n  `;\n\n  if (formValues.name.length === 0) {\n    callNotification('Error', 'error', `\n    <p>You need to fill name field</p>\n  `);\n  } else if (isNaN(formValues.name) === false) {\n    callNotification('Error', 'error', `\n    <p>You don't need to use numbers in name field</p>\n  `);\n  } else if (formValues.name.length < 4) {\n    callNotification('Error', 'error', `\n    <p>Length of name must be not less than 4 letters</p>\n  `);\n  } else if (formValues.position.length === 0) {\n    callNotification('Error', 'error', `\n    <p>You need to fill position field</p>\n  `);\n  } else if (isNaN(formValues.position) === false) {\n    callNotification('Error', 'error', `\n    <p>You don't need to use numbers in position field</p>\n  `);\n  } else if (formValues.age < 18 || formValues.age > 90) {\n    callNotification('Error', 'error', `\n    <p>Age must be not less than 18 and not more than 90 years old</p>\n  `);\n  } else if (formValues.salary.length === 0) {\n    callNotification('Error', 'error', `\n    <p>You need to fill salary field</p>\n  `);\n  } else {\n    callNotification('Success', 'success', `\n      <p>Information added to the table</p>\n    `);\n\n    bodyOfTable.insertAdjacentHTML('beforeend', newRow);\n  }\n});\n\nbodyOfTable.addEventListener('dblclick', () => {\n  const cellInitialValue = event.target.innerHTML;\n  const row = event.target.parentElement;\n  const position = event.target.cellIndex;\n  const currentCell = row.children[position];\n\n  if (position === 2) {\n    event.target.innerHTML = `\n      <select\n      name=\"office\"\n      data-qa=\"office\"\n      class=\"cell-input\"\n      >\n        ${offices}\n      </select>\n    `;\n  } else {\n    event.target.innerHTML = `\n      <input class=\"cell-input\"></input>\n    `;\n  }\n\n  const input = document.getElementsByClassName('cell-input')[0];\n\n  if (position === 3) {\n    input.type = 'number';\n    input.min = '18';\n    input.max = '99';\n  }\n\n  if (position === 4) {\n    input.type = 'number';\n  }\n\n  input.focus();\n\n  const success = `<p>Information has added to the cell</p>`;\n\n  input.addEventListener('blur', () => {\n    const value = input.value;\n\n    if (position === 0 || position === 1) {\n      if (isNaN(value) === true && value.length >= 4) {\n        currentCell.innerHTML = value;\n\n        callNotification('Success', 'success', success);\n      } else {\n        currentCell.innerHTML = cellInitialValue;\n\n        callNotification('Error', 'error', `\n          <p>Length of name must be not less than 4</p>\n          <p>You don't need to use numbers in this field</p>\n        `);\n      }\n    }\n\n    if (position === 2) {\n      callNotification('Success', 'success', success);\n\n      currentCell.innerHTML = value;\n    }\n\n    if (position === 3) {\n      if (value >= 18\n        && value <= 99\n        && isNaN(value) === false) {\n        callNotification('Success', 'success', success);\n\n        currentCell.innerHTML = value;\n      } else {\n        currentCell.innerHTML = cellInitialValue;\n\n        callNotification('Error', 'error', `\n          <p>Age must be not less than 18 and not more than 90 years old</p>\n          <p>You don't need to use letters in this field</p>\n        `);\n      }\n    }\n\n    if (position === 4) {\n      if (isNaN(value) === false && value.length !== 0) {\n        callNotification('Success', 'success', success);\n\n        currentCell.innerHTML\n        = `$${(+value).toLocaleString('en-US')}`;\n      } else {\n        currentCell.innerHTML = cellInitialValue;\n\n        callNotification('Error', 'error', `\n          <p>You don't need to use letters in this field</p>\n        `);\n      }\n    }\n  });\n\n  input.addEventListener('keypress', () => {\n    const value = input.value;\n\n    if (event.key === 'Enter') {\n      if (position === 0 || position === 1) {\n        if (isNaN(value) === true && value.length >= 4) {\n          currentCell.innerHTML = value;\n\n          callNotification('Success', 'success', success);\n        } else {\n          currentCell.innerHTML = cellInitialValue;\n\n          callNotification('Error', 'error', `\n            <p>Length of name must be not less than 4</p>\n            <p>You don't need to use numbers in this field</p>\n          `);\n        }\n      }\n\n      if (position === 2) {\n        callNotification('Success', 'success', success);\n\n        currentCell.innerHTML = value;\n      }\n\n      if (position === 3) {\n        if (value >= 18\n          && value <= 99\n          && isNaN(value) === false) {\n          callNotification('Success', 'success', success);\n\n          currentCell.innerHTML = value;\n        } else {\n          currentCell.innerHTML = cellInitialValue;\n\n          callNotification('Error', 'error', `\n            <p>Age must be not less than 18 and not more than 90 years old</p>\n            <p>You don't need to use letters in this field</p>\n          `);\n        }\n      }\n\n      if (position === 4) {\n        if (isNaN(value) === false && value.length !== 0) {\n          callNotification('Success', 'success', success);\n\n          currentCell.innerHTML\n          = `$${(+value).toLocaleString('en-US')}`;\n        } else {\n          currentCell.innerHTML = cellInitialValue;\n\n          callNotification('Error', 'error', `\n            <p>You don't need to use letters in this field</p>\n          `);\n        }\n      }\n    }\n  });\n});\n"]}